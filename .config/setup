#!/bin/bash

#------------------------------------------------------------------------
# Setup script:
#
# This script is used to setup installation of the util/ repository as a
# stand-alone package, when it is not installed as a submodule of a larger
# git repository.  It is not needed, and should not be used, when the util/
# director is installed as a submodule of a larger project. 
#
# This script assumes that the util directory, which contians the contents
# of the util repository, are installed within a directory structure 
#
#  ROOT/
#  ROOT/src/
#  ROOT/src/util
# 
# in which ROOT denotes the name of the root directory of the instalation 
# (which is generally something other than ROOT), and in which this root 
# repository is empty except for its src/ subdirectory, and the src/ 
# directory is empty except for the util/ subdirectory.
#
# This setup script should be run once before the first time code in 
# the util/ directory is compiled. It must be run from the src/util/ 
# directory, using the command:
#
# >>>> .config/setup
# 
# What this script does:
#
# 1) It copies default or repository versions of build configuration files,
# to modifiable user versions, named config.mk, which are placed in the
# src/ and src/util directories. 
#
# 2) It sets the makefile variables $(ROOT_DIR), $(SRC_DIR), and $(BLD_DIR) 
# in the main config.mk file in the src/ directory to the correct absolute 
# paths.
#
# 3) It installs copies of the python scripts and bash scripts that are used 
# automatically generate dependency information. Python scripts are 
# installed in root/scripts/python and the makeDep bash script is installed
# in root/bin. 

#========================================================================
# Set working directory to ROOT directory

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null && pwd )"
if [ "$SCRIPT_DIR" != "$PWD" ]; then
   unset CDPATH
   \cd $SCRIPT_DIR
fi
\cd ../../..
echo "Resetting working directory to ROOT directory: $PWD"

#=======================================================================
# Choose file to use for compiler settings

if [ "$#" -gt 0 ]; then
  VARFILE=$1
else
  VARFILE="gcc"
fi
VARFILE="src/util/.config/compiler/$VARFILE"

#=======================================================================
# Setup src/ source file directory tree

# Construct and install main configuration file src/config.mk
sed -e "s|=PWD|=$PWD|" -e "s|=OWD|src|" src/util/.config/main_config.1 > src/temp
cat src/temp "$VARFILE" src/util/.config/main_config.2 > src/config.mk
rm src/temp

# Note: Stream editor (sed) is used here to:
#   - Set $(ROOT_DIR) to absolute path of directory from which this
#      script is invoked (i.e., the simpatico root directory).
#   - Set $(BLD_DIR) to absolute path to src/ directory (in-source-build)

# Create main config.mk file and set the value of $(ROOT_DIR) and $(BLD_DIR)
# sed -e "s|=PWD|=$PWD|" -e "s|=OWD|src|" src/util/.config/src_config > src/config.mk

# Copy util namespace configure script 
cp src/util/.config/configure src/configure

# Copy util namespace level configuration file
cp src/util/.config/util_config src/util/config.mk

# Copy the makeDep dependency-maker script into the bin directory
if [ ! -d bin ]; then
  mkdir bin
fi
cp src/util/.config/makeDep bin/

# Copy python files into the scripts/python directory
if [ ! -d scripts ]; then
   mkdir scripts
fi
if [ ! -d scripts/python ]; then
   mkdir scripts/python
fi
cp src/util/.config/*.py scripts/python/

if [ ! -d doc ]; then
   mkdir doc
fi
if [ ! -d doc/html ]; then
   mkdir doc/html
fi
if [ ! -d doc/manual ]; then
   mkdir doc/manual
fi
cp src/util/.config/doc/Doxyfile doc/
cp src/util/.config/doc/makefile doc/
